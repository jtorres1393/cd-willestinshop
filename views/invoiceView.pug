extend layout

block content
    for item in data
        form#mainForm.fullWidth.flex(method='POST', action=`/admin/invoice-view?id=${item.id}`)
            #menuPanel
                input(type="hidden", name="cost")
                p.mbMed.tTitle Settings
                .menuSave.menuItem.mbSm
                    input.menuOp(type="submit", value="Save Changes")
                .menuImg.menuItem.mbLrg
                    a.tCap.menuOp(target="blank" href=`/admin/email-print?id=${item.id}`) View Print Version 
                .menuTrash.menuItem.mbLrg
                    a.tCap.menuOp(href=`/admin/invoice-delete?id=${item.id}&rootID=${item.rootID}`, onclick="return confirm('Are you sure?')")="Delete Invoice" 

            #content.col23.colSkip
                p.mbMed.tTitle.tCap
                    a(href="/admin/invoices")
                        span.tGray=`Invoices / `  
                    a(href=`/admin/buyer-view?id=${item.buyer[0].id}`)
                        span.tGray=`${item.buyer[0].firstName} ${item.buyer[0].lastName} / `    
                    span=`Invoice #${item.id}`
                a.fullWidth(target="blank" href=`/admin/email-print?id=${item.id}`)       
                        .btn.btn-prime.fullWidth.relative.mbSm(style={"background-color":((item.status==="paid"))?"#00ff00":""})
                                p.tBold View Print Version
                #itemsHold
                    .fullWidth.flex.bBlk.bBotSm.pbXs.mbSm
                        .col3.tBold Item
                        .col2.flex
                            .col3.tBold.quantTitle Quantity
                            .col3.tBold.quantTitle Cost
                            .col3.tBold
                    input(name="cart", type="hidden")
                    -   var cart = JSON.parse(item.cart)
                    for line in cart
                        .cartHold.fullWidth.flex.mbSm.bBlk.bBotSm.pbSm(data-item=line.item, data-cost=line.cost, data-quantity=line.quantity)
                            .col2.mbXs
                                input.prime-input.itemIn(name="item", type="text", placeholder="Item Name", value=line.item)
                            .col2.mbXs.flex.invOpHold
                                .col3
                                    input.prime-input.qIn(name="quantity", type="integer", placeholder="Quantity", value=line.quantity)
                                .col3
                                    input.prime-input.costIn(name="price", type="number", step="any", placeholder="Cost", value=line.cost/100)
                                .col3
                                    .btn.btn-prime.fullWidth.relative.deleteNodeBut
                                        p.tBold Ã—
                .fullWidth.flex.mbLrg.totalCharges
                    if item.status !=="paid"
                        .btn.btn-prime.fullWidth.relative.mbSm.mbHuge(onclick=`addField()`)
                            p.tBold Add New Line
                    .col4.mbSm
                        label Shipping
                        p
                        input.prime-input.costIn(name="shipping", type="number", step="any", placeholder="shipping", value=item.shipping/100, required)
                    .col4.mbSm
                        label Tax
                        p
                        input.prime-input.costIn(name="tax", type="number", step="any", placeholder=item.tax/100, value=item.tax/100, required)
                    .col2
                        label Item Total
                        p
                        .btn.btn-sec.relative 
                            p#total
                    .fullWidth.mbMed.grandWidth
                        label Grand Total
                        p
                        .btn.btn-sec.relative 
                            p#grand
                    a.col2(href=`/admin/invoice-email?id=${item.id}` onclick="return confirm('Are you sure?')")       
                        .btn.btn-prime.fullWidth.relative.mbSm(style={"background-color":((item.status==="sent")|| (item.status==="paid"))?"#00ff00":""})
                                p.tBold Send Invoice
                    a.col2(href=`/admin/invoice-ship?id=${item.id}` onclick="return confirm('Are you sure?')")       
                        .btn.btn-prime.fullWidth.relative.mbSm(style={"background-color":(item.shipped)?"#00ff00":""})
                                p.tBold Shipped
                    if item.status!=="paid"
                    a.fullWidth(href=`/admin/invoice-paid?id=${item.id}` onclick="return confirm('Are you sure?')")       
                        .btn.btn-prime.fullWidth.relative.mbSm(style={"background-color":((item.status==="paid"))?"#00ff00":""})
                                p.tBold Mark Paid
                                

                .info.fullWidth.flex.mbMed
                    p.tBold.fullWidth.mbSm Buyer Info
                    p.fullWidth.tCap.mbXs=`${item.buyer[0].firstName} ${item.buyer[0].lastName}`
                    if item.buyer[0].company
                        p.fullWidth.mbXs=`${item.buyer[0].company}`
                    if item.buyer[0].address
                        p.fullWidth=`${item.buyer[0].address}`
                    if item.buyer[0].city
                        p.fullWidth=`${item.buyer[0].city}`
                            if item.buyer[0].state
                                span=`, ${item.buyer[0].state}`
                            if item.buyer[0].zip
                                span=` ${item.buyer[0].zip}`
   
                    
                
                    

                .fullWidth.flex
                    if item.buyer[0].phone
                        .col2
                            .btn.btn-sec.fullWidth.relative
                                p.tBold=item.buyer[0].phone
                    if item.buyer[0].email
                        a.col2(href=`mailto:${item.buyer[0].email}`)
                            .btn.btn-sec.fullWidth.relative
                                p.tBold=item.buyer[0].email

                    

    script.
        var setListen = function(){
            document.querySelectorAll('.itemIn').forEach(item => {
                item.addEventListener('input', e => {
                    var curr = getClosest(e.target, '.cartHold') 
                    curr.setAttribute('data-item',e.target.value)
                })
            })

            document.querySelectorAll('.qIn').forEach(item => {
                item.addEventListener('input', e => {
                    var curr = getClosest(e.target, '.cartHold') 
                    curr.setAttribute('data-quantity', e.target.value)
                    calcTotal();
                })
            })

            

            document.querySelectorAll('.costIn').forEach(item => {
                item.addEventListener('input', e => {
                    var curr = getClosest(e.target, '.cartHold') 
                    curr.setAttribute('data-cost',(e.target.value)*100)
                    calcTotal();
                })
            })

            var shipHold = document.querySelector('input[name=shipping]');
            shipHold.addEventListener('input',calcTotal);
            
            var taxHold = document.querySelector('input[name=tax]');
            taxHold.addEventListener('input',calcTotal);

            document.querySelectorAll('.deleteNodeBut').forEach(item => {
                item.addEventListener('click', e => {
                    deleteNode(e);
                })
            })
            
        }

        var calcTotal = function(){
            var items = document.getElementsByClassName('cartHold');
            var total = 0;
            var shipHold = document.querySelector('input[name=shipping]');
            var taxHold = document.querySelector('input[name=tax]');
            var costHold = document.querySelector('input[name=cost]');
            var tax = parseFloat(taxHold.value)
            var ship = shipHold.value
            if(ship === null){
                ship = 0
            }
            else{
                ship = ship*100
            }

            Array.prototype.forEach.call(items , function(elem){
                if((parseInt(elem.getAttribute('data-cost'))> 0)&&(parseInt(elem.getAttribute('data-quantity'))> 0)){
                    cost = parseInt(elem.getAttribute("data-quantity"))*parseInt(elem.getAttribute("data-cost"))
                    total = total+cost
                }

            });
                cartFinal = document.querySelector('#total');
                cartFinal.innerHTML=`$${((total/100)).toFixed(2)}`
                grandFinal = document.querySelector('#grand');
                grandFinal.innerHTML=`$${(((total)+((tax/100)*(total))+(ship))/100).toFixed(2)}`            
                costHold.value = parseInt(((((total)+((tax/100)*(total))+(ship))/100).toFixed(2))*100)
        }

        var getClosest = function (elem, selector) {

            // Element.matches() polyfill
            if (!Element.prototype.matches) {
                Element.prototype.matches =
                    Element.prototype.matchesSelector ||
                    Element.prototype.mozMatchesSelector ||
                    Element.prototype.msMatchesSelector ||
                    Element.prototype.oMatchesSelector ||
                    Element.prototype.webkitMatchesSelector ||
                    function(s) {
                        var matches = (this.document || this.ownerDocument).querySelectorAll(s),
                            i = matches.length;
                        while (--i >= 0 && matches.item(i) !== this) {}
                        return i > -1;
                    };
            }

            // Get the closest matching element
            for ( ; elem && elem !== document; elem = elem.parentNode ) {
                if ( elem.matches( selector ) ) return elem;
            }
            return null;

        }

        var addField= function(){
            let clone = document.querySelector('.cartHold').cloneNode(true);
            clone.setAttribute('data-item','')
            clone.setAttribute('data-quantity',0)
            clone.setAttribute('data-cost', 0)
            cleanFields(clone);
            let cd = clone.querySelector('.deleteNodeBut')
            cd.addEventListener("click",deleteNode)
            document.querySelector('#itemsHold').appendChild( clone );
            setListen()
        }

        var cleanFields = function (obj) {
                    for (var i = 0; n = obj.childNodes[i]; ++i) {
                        if (n.childNodes && n.tagName != 'INPUT') {
                            cleanFields(n);
                        } else if (n.tagName == 'INPUT' && n.type == 'text') {
                            n.value = '';
                        }
                        else if (n.tagName == 'INPUT' && n.type == 'number') {
                            n.value = '';
                        }
                    }
                }
        
            var deleteNode= function(e){
                var el = getClosest(e.target, '.cartHold') 
                
            el.parentNode.removeChild(el)
        }

        var form = document.getElementById('mainForm');
        form.onsubmit = function() {
             var allCap = document.getElementsByClassName('cartHold');
                let cartOBJ = [];
                Array.prototype.forEach.call(allCap , function(elem){
                    cartOBJ.push( { item:elem.getAttribute("data-item"), "quantity":elem.getAttribute("data-quantity"), "cost":elem.getAttribute("data-cost")} )

                });
                cartFinal = document.querySelector('input[name=cart]');
                cartFinal.value = JSON.stringify(cartOBJ);

        }

        setListen()
        calcTotal();